#!/bin/bash

# =======================================================================
# ===== OPTION VARIABLES ================================================
# =======================================================================
option_interactive=false
option_verbose=false
option_recursive=false

# =======================================================================
# ===== IF BIN & RESTORE DOES NOT EXIST, CREATE THEM ====================
# =======================================================================
function create_bin() {
  if [ ! -d /$HOME/recyclebin ]; then
    mkdir /$HOME/recyclebin           
  fi    

  if [ ! -e /$HOME/.restore.info ]; then        
    touch /$HOME/.restore.info        
  fi      
  return 0  
}

# =======================================================================
# ===== ERROR MESSAGE ===================================================
# =======================================================================
function display_error() {
  case "$1" in
    "is_directory")  
      if $option_verbose ; then
        echo "Unable to recycle directories –- operation aborted" 1>&2 
      else  
        echo "Unable to recycle directories –- operation aborted" | 1>&2 
      fi  ;;

    "is_self")
      if $option_verbose ; then
        echo "Unable to recycle 'recycle' –- operation aborted" 1>&2 
      else  
        echo "Unable to recycle 'recycle' –- operation aborted" | 1>&2
      fi  ;;       

    "no_argument")
      if $option_verbose ; then
        echo "File not provided –- operation aborted" 1>&2 
      else  
        echo "File not provided –- operation aborted" | 1>&2
      fi  ;;

    "no_exists")
      if $option_verbose ; then
        echo "File does not exist –- operation aborted" 1>&2 
      else  
        echo "File does not exist –- operation aborted" | 1>&2
      fi  ;;
  esac 
}

# =======================================================================
# ===== VALIDATION TESTS ================================================
# =======================================================================
function validate_has_argument() {    
  if [ $1 -eq 0 ]; then
    display_error "no_argument"   
    exit 1     
  fi
}

function validate_not_directory() {    
  if [ -d $1 ]; then
    display_error "is_directory"
    exit 1       
  fi    
}

function validate_file_exist() {      
  if [ ! -f $1 ] ; then
    display_error "no_exists"      
    return 1  
  fi
}

function validate_not_self() {
  if [[ $1 =~ ^recycle$ ]]; then
    display_error "is_self"      
    return 1  
  fi
}

# =======================================================================
# ===== RECYCLE =========================================================
# =======================================================================
function recycle() {
  validate_file_exist $1
  if [ $? -eq 1 ]; then
      return 1
  fi 
  validate_not_self $1
  if [ $? -eq 1 ]; then
      return 1
  fi 
  file_inode="$(ls -i $1 | cut -d' ' -f1)"
  file_path="$(cd "$(dirname "$file_path")"| pwd)"
  file_recycled_name="${1}_${file_inode}"
  file_recycled_entry=$file_recycled_name:$file_path
  echo $file_recycled_entry >> /$HOME/.restore.info
  mv $1 /$HOME/recyclebin/$file_recycled_name
  if $option_verbose ; then
    echo "Success! -- $1 recycled as $file_recycled_name"
  fi  
  return 0
}

# =======================================================================
# ===== RECURSIVE RECYCLE ===============================================
# =======================================================================
function recycle_recursive() {
  if [ -z "$(ls)" ]; then
    delete_dir=$(pwd)
    cd ..
    rmdir $delete_dir 
  fi  
  
  if [ -d $1 ]; then    
    cd $1             
    current_dir=$1
    
    for file in $(ls); do   
      if [ ! -d $file ]; then
        recycle $file        
      fi

      if  [ -d $file ]; then          
        recycle_recursive $file          
        cd ..        
        rmdir $current_dir         
      fi 
    done    
    return 0
  fi 

  if [ -f $1 ]; then
    recycle $1
    return 0
  fi

  if [ -z "$(ls)" ]; then
    delete_dir=$(pwd)
    cd ..
    rmdir $delete_dir 
  fi  
}

# =======================================================================
# ===== SET OPTIONS =====================================================
# =======================================================================
function set_options() {
  while getopts :ivr opt
    do
    case $opt in
      i) option_interactive=true;;
      v) option_verbose=true;;
      r) option_recursive=true;;
      *) echo Bad Option - $OPTARG
      exit 1;;
    esac
  done
}

# =======================================================================
# ===== DO OPTIONS ======================================================
# =======================================================================
function perform_options() {
  if $option_interactive ; then          
    for arg in $input; do
      read -p "Confirm recycle $arg? y/n" confirmation        
      if [[ ! $confirmation =~ ^[Yy] ]]; then
        input=$(echo $input | sed "s/\b$arg\b//")
        continue
      fi            
    done
  fi

  if $option_verbose ; then
    for arg in $input; do
      echo "Attempting to recycle $arg"            
    done
  fi  

  if $option_recursive ; then
    for arg in $input; do
      recycle_recursive $arg        
    done 

    if [ -z "$(ls)" ]; then
      delete_dir=$(pwd)
      cd ..
      rmdir $delete_dir 
    fi  
    return 0
  fi  

  for arg in $input; do
    validate_not_directory $arg
    if [ $? -eq 1 ]; then
      continue
    fi   
    recycle $arg    
  done  
  return 0
}

# =======================================================================
# ===== INIT ============================================================
# =======================================================================
set_options $@
shift $[OPTIND-1]

input=$@
input_num=$#

create_bin
validate_has_argument $input_num

perform_options $input